<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wigo.cmm.sys.dao.UserBaseDao">
    <sql id="sqlPkConditions">
        <choose>
            <when test="userId !=null and userId !=''">
            WHERE  USER_ID           =       #{userId}
            </when>
            <otherwise>
            WHERE LOGIN_ID          = #{loginId}
              AND IFNULL(DEL_YN ,'N')           != 'Y'
              LIMIT 0, 1
            </otherwise>
        </choose>
    </sql>
    <sql id="sqlCols">
                      USER_ID                    /*사용자코드        */
                    , LOGIN_ID                   /*로그인ID        */
                    , LOGIN_PWD                  /*로그인비밀번호        */
                    , USER_NM                    /*사용자명        */
                    , EMAIL_ADDR                 /*이메일주소        */
                    , MPHON_NO                   /*이동전화번호        */
                    , USER_GNDR_CD               /*사용자성별코드        */
                    , USER_BIRTHDAY              /*사용자생년월일        */
                    , PWD_AMD_DT                 /*비밀번호수정일시        */
                    , LAST_LOGIN_DT              /*최종로그인일시        */
                    , PWD_EXP_DT                 /*비밀번호만료일시        */
                    , LOGIN_FAIL_CNT             /*로그인실패수        */
                    , DEL_YN                    /*삭제여부        */
                    , REG_DT                    /*등록일시        */
                    , AMDR_ID                    /*수정자ID        */
                    , AMD_DT                    /*수정일시        */
                    , REGR_ID                    /*등록자ID        */
    </sql>
    <sql id="sqlConditions">
    <where>
    <if test="userId != null and userId != ''">
            <choose>
                <when test="userId instanceof String">
                              AND A.USER_ID           =       #{userId}
                </when>
                <otherwise>
                    AND A.USER_ID           IN
                    <foreach item="item" index="index" collection="userId" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </otherwise>
            </choose>
        </if>
        <if test="loginId != null and loginId != ''">
                      AND A.LOGIN_ID          =       #{loginId}
        </if>
         <if test="loginIdLike != null and loginIdLike != ''">
                      AND A.LOGIN_ID         LIKE   CONCAT('%' ,  #{loginIdLike} ,'%')
        </if>
        <if test="loginPwd != null and loginPwd != ''">
                      AND A.LOGIN_PWD         =       #{loginPwd}
        </if>
        <if test="userNm != null and userNm != ''">
                      AND A.USER_NM           =       #{userNm}
        </if>
        <if test="userNmLike != null and userNmLike != ''">
                      AND A.USER_NM          LIKE   CONCAT('%' ,  #{userNmLike} ,'%')
        </if>
        <if test="emailAddr != null and emailAddr != ''">
                      AND A.EMAIL_ADDR        =       #{emailAddr}
        </if>
        <if test="mphonNo != null and mphonNo != ''">
                      AND A.MPHON_NO          =       #{mphonNo}
        </if>
        <if test="userGndrCd != null and userGndrCd != ''">
            <choose>
                <when test="userGndrCd instanceof String">
                              AND A.USER_GNDR_CD      =       #{userGndrCd}
                </when>
                <otherwise>
                    AND A.USER_GNDR_CD      IN
                    <foreach item="item" index="index" collection="userGndrCd" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </otherwise>
            </choose>
        </if>
        <if test="userBirthday != null and userBirthday != ''">
                      AND A.USER_BIRTHDAY     =       #{userBirthday}
        </if>
        <if test="pwdAmdDt != null and pwdAmdDt != ''">
                      AND A.PWD_AMD_DT        =       #{pwdAmdDt}
        </if>
        <if test="lastLoginDt != null and lastLoginDt != ''">
                      AND A.LAST_LOGIN_DT     =       #{lastLoginDt}
        </if>
        <if test="pwdExpDt != null and pwdExpDt != ''">
                      AND A.PWD_EXP_DT        =       #{pwdExpDt}
        </if>
        <if test="loginFailCnt != null and loginFailCnt != ''">
                      AND A.LOGIN_FAIL_CNT    =       #{loginFailCnt}
        </if>
        <if test="delYn != null and delYn != ''">
                      AND A.DEL_YN            =       #{delYn}
        </if>
        <if test="exGrpId != null and exGrpId != ''">
           AND A.USER_ID NOT IN (SELECT USER_ID FROM TB_SYS_GRP_USER_REL WHERE GRP_ID = #{exGrpId})
           AND A.DEL_YN  = 'N'
         </if>
         <if test="grpId != null and grpId != ''">
           AND A.USER_ID IN (SELECT USER_ID FROM TB_SYS_GRP_USER_REL WHERE GRP_ID = #{grpId})
           AND A.DEL_YN  = 'N'
         </if>
         </where>
    </sql>
    <select id="selectListCount" resultType="int">
                SELECT /*com.wigo.cmm.sys.dao.UserBaseDao.selectListCount*/ COUNT(1)
                 FROM TB_SYS_USER_BAS A
        <include refid="sqlConditions"/>
    </select>
    <select id="selectList" resultType="com.wigo.cmm.sys.model.UserBaseVo">
        <include refid="com.wigo.cmm.sys.dao.CommonDao.pagingHeader"/>
               SELECT /*com.wigo.cmm.sys.dao.UserBaseDao.selectList*/ A.USER_ID                    /*사용자코드        */
                    , A.LOGIN_ID                   /*로그인ID        */
<!--                     , A.LOGIN_PWD                  /*로그인비밀번호        */ -->
                    , A.USER_NM                    /*사용자명        */
                    , A.EMAIL_ADDR                 /*이메일주소        */
                    , A.MPHON_NO                   /*이동전화번호        */
                    , A.USER_GNDR_CD               /*사용자성별코드        */
                    , A.USER_BIRTHDAY              /*사용자생년월일        */
                    , A.PWD_AMD_DT                 /*비밀번호수정일시        */
                    , A.LAST_LOGIN_DT              /*최종로그인일시        */
                    , A.PWD_EXP_DT                 /*비밀번호만료일시        */
                    , A.LOGIN_FAIL_CNT             /*로그인실패수        */
                    , A.DEL_YN                    /*삭제여부        */
                    , A.REG_DT                    /*등록일시        */
                    , A.AMDR_ID                    /*수정자ID        */
                    , A.AMD_DT                    /*수정일시        */
                    , A.REGR_ID                    /*등록자ID        */
                 FROM TB_SYS_USER_BAS A
        <include refid="sqlConditions"/>
               ORDER BY USER_NM
        <include refid="com.wigo.cmm.sys.dao.CommonDao.pagingFooter"/>
    </select>
    <select id="select" resultType="com.wigo.cmm.sys.model.UserBaseVo">
               SELECT /*com.wigo.cmm.sys.dao.UserBaseDao.select*/ <include refid="sqlCols"/>
                 FROM TB_SYS_USER_BAS A
        <include refid="sqlPkConditions"/>
    </select>
    <insert id="insert">
                INSERT /*com.wigo.cmm.sys.dao.UserBaseDao.insert*/ INTO TB_SYS_USER_BAS (
        <include refid="sqlCols"/>
                 ) VALUES (
                       #{userId}
                     , #{loginId}
                     , #{loginPwd}
                     , #{userNm}
                     , NULL /*#{emailAddr}*/
                     , NULL /*#{mphonNo}*/
                     , #{userGndrCd}
                     , NULL #{userBirthday}
                     , #{pwdAmdDt}
                     , #{lastLoginDt}
                     , #{pwdExpDt}
                     , IFNULL(#{loginFailCnt},0)
                     , IFNULL(#{delYn},'N')
                     , CURRENT_TIMESTAMP()
                     , #{amdrId}
                     , CURRENT_TIMESTAMP()
                     , #{regrId}
                 )
    </insert>
    
    <update id="update">
               UPDATE /*com.wigo.cmm.sys.dao.UserBaseDao.update*/ TB_SYS_USER_BAS
                  SET LOGIN_ID            =         IFNULL(#{loginId},LOGIN_ID)
                    , USER_NM             =         #{userNm}
<!--                     , EMAIL_ADDR          =         #{emailAddr} -->
<!--                     , MPHON_NO            =         #{mphonNo} -->
                    , USER_GNDR_CD        =         #{userGndrCd}
<!--                     , USER_BIRTHDAY       =         #{userBirthday} -->
                    , DEL_YN              =         #{delYn}
                    , AMDR_ID             =         #{amdrId}
                    , AMD_DT              =         CURRENT_TIMESTAMP()
        <include refid="sqlPkConditions"/>
    </update>
    <update id="updateEmp">
               UPDATE /*com.wigo.cmm.sys.dao.UserBaseDao.updateEmp*/ TB_SYS_USER_BAS
                  SET USER_NM             =         #{userNm}
<!--                     , EMAIL_ADDR          =         #{emailAddr} -->
<!--                     , MPHON_NO            =         #{mphonNo} -->
<!--                     , USER_BIRTHDAY       =         #{userBirthday} -->
                    , LOGIN_ID            =         IFNULL(#{loginId},LOGIN_ID)
                    , DEL_YN              =         #{delYn}
                    , AMDR_ID             =         #{amdrId}
                    , AMD_DT              =         CURRENT_TIMESTAMP()
        <include refid="sqlPkConditions"/>
    </update>
    <delete id="delete">
               DELETE /*com.wigo.cmm.sys.dao.UserBaseDao.delete*/  
                 FROM TB_SYS_USER_BAS
        <include refid="sqlPkConditions"/>
    </delete>
    <select id="selectUser" resultType="com.wigo.cmm.sys.model.LoginUserVo">
               SELECT /*com.wigo.cmm.sys.dao.UserBaseDao.selectUser*/ A.USER_ID                    /*사용자코드        */
                    , A.LOGIN_ID                    /*로그인ID        */
                    , A.LOGIN_PWD                    /*로그인비밀번호        */
                    , A.USER_NM                    /*사용자명        */
                    , IFNULL(B.EMAIL_ADDR,A.EMAIL_ADDR) EMAIL_ADDR                   /*이메일주소        */
                    , IFNULL(B.MPHON_NO,A.MPHON_NO)        MPHON_NO           /*이동전화번호        */
                    , A.USER_GNDR_CD                    /*사용자성별코드        */
                    , IFNULL(B.BIRTHDAY,A.USER_BIRTHDAY)      USER_BIRTHDAY              /*사용자생년월일        */
                    , A.PWD_AMD_DT                    /*비밀번호수정일시        */
                    , A.LAST_LOGIN_DT                    /*최종로그인일시        */
                    , A.PWD_EXP_DT                    /*비밀번호만료일시        */
                    , A.LOGIN_FAIL_CNT                    /*로그인실패수        */
                    , A.DEL_YN                    /*삭제여부        */
                    , B.EMP_ID
                    , B.ORG_ID
                    , B.EMP_NM
                    , B.CMP_CD
                    , B.JOB_ID
                    , B.DUTY_CD
                    , B.TEL_NO
                    , B.EMP_GRADE_CD
                    , B.STATUS_CD
                    , B.ENCO_YMD
                    , B.RETIRE_YMD
                    , B.EMP_TYPE_CD
                    , B.MPHON_NO MPHON_NO_ENC_VAL
<!--                     , (SELECT LISTAGG(GRP_ID, ',') WITHIN GROUP(ORDER BY GRP_ID) FROM TB_SYS_GRP_USER_REL WHERE USER_ID = A.USER_ID) GRP_IDS  -->
                    , ( SELECT GROUP_CONCAT(GRP_ID ORDER BY GRP_ID SEPARATOR  ',') FROM ( SELECT GRP_ID, USER_ID
                                                                                         FROM TB_SYS_GRP_USER_REL
                                                                                            UNION ALL
                                                                                       SELECT GRP_ID, EMP_ID
                                                                                         FROM  TB_SYS_GRP_EMP_REL
                                                                                        UNION ALL
                                                                                       SELECT GRP_ID, EMP_ID 
                                                                                         FROM (    WITH RECURSIVE OO AS (
                                                                                                         SELECT 1 AS LEVEL 
                                                                                                              , O.ORG_ID
                                                                                                              , R.GRP_ID
                                                                                                            FROM TB_SYS_ORG_BAS O
                                                                                                            INNER JOIN TB_SYS_GRP_ORG_REL R ON  O.ORG_ID = R.ORG_ID
                                                                                                         UNION ALL
                                                                                                         SELECT LEVEL + 1 AS LEVEL 
                                                                                                              , O.ORG_ID
                                                                                                              , OO.GRP_ID
                                                                                                            FROM OO 
                                                                                                            INNER JOIN TB_SYS_ORG_BAS O ON OO.ORG_ID= O.UP_ORG_ID 
                                                                                                      )
                                                                                                      SELECT ORG_ID,GRP_ID  FROM OO
                                                                                               ) A 
                                                                                             , TB_SYS_EMP_BAS B 
                                                                                         WHERE A.ORG_ID = B.ORG_ID ) GRP WHERE GRP.USER_ID = A.USER_ID ) GRP_IDS
                 FROM TB_SYS_USER_BAS A 
                 LEFT JOIN TB_SYS_EMP_BAS B ON A.USER_ID = B.EMP_ID
      <include refid="sqlPkConditions" />
    </select>
     <update id="updateLogin">
           UPDATE /*com.wigo.cmm.sys.dao.UserBaseDao.updateLogin*/ TB_SYS_USER_BAS
              SET LAST_LOGIN_DT        =    CURRENT_TIMESTAMP()
                , LOGIN_FAIL_CNT       =    0   
            <include refid="sqlPkConditions" />
    </update>
    <update id="updateLoginFail">
            UPDATE /*com.wigo.cmm.sys.dao.UserBaseDao.updateLoginFail*/ TB_SYS_USER_BAS
              SET LAST_LOGIN_DT        =    CURRENT_TIMESTAMP()
                , LOGIN_FAIL_CNT       =    IFNULL(LOGIN_FAIL_CNT,0) + 1   
         <include refid="sqlPkConditions" />
    </update>
    <update id="updatePassword">
        UPDATE /*com.wigo.cmm.sys.dao.UserBaseDao.updatePassword*/ TB_SYS_USER_BAS
              SET LOGIN_PWD        =    #{loginPwd}
                , LOGIN_FAIL_CNT       =    0
                , PWD_AMD_DT          =    CURRENT_TIMESTAMP()
         <include refid="sqlPkConditions" />
    </update>
     <insert id="insertLoginHist">
        INSERT /*com.wigo.cmm.sys.dao.UserBaseDao.insertLoginHist*/ INTO TB_SYS_USER_LOGIN_HST (
                  USER_ID
                , LOGIN_DT
                , LOGIN_IP_ADDR
                , REGR_ID
                , REG_DT
                , AMDR_ID
                , AMD_DT
            ) VALUES ( 
                  #{userId}
                , CURRENT_TIMESTAMP()
                , #{peerIp}
                , #{regrId}
                , CURRENT_TIMESTAMP()
                , #{regrId}
                , CURRENT_TIMESTAMP()
            )
    </insert>
     <update id="updateMyInfo">
       UPDATE /*com.wigo.cmm.sys.dao.UserBaseDao.updateMyInfo*/ TB_SYS_USER_BAS
          SET EMAIL_ADDR           =         #{emailAddr}
            , MPHON_NO             =         #{mphonNo}
            , AMDR_ID              =         #{amdrId}
            , AMD_DT               =         CURRENT_TIMESTAMP()
         <include refid="sqlPkConditions" />
    </update>
    <select id="selectUserGroupList" resultType="com.wigo.cmm.sys.model.GrpBaseVo">
         SELECT B.* 
           FROM ( SELECT GRP_ID
                       , USER_ID
                    FROM TB_SYS_GRP_USER_REL
                   UNION ALL
                  SELECT GRP_ID, EMP_ID
                    FROM  TB_SYS_GRP_EMP_REL
                   UNION ALL
                  SELECT GRP_ID, EMP_ID  
                   FROM (    WITH RECURSIVE OO AS (
                                    SELECT 1 AS LEVEL 
                                         , O.ORG_ID
                                         , R.GRP_ID
                                       FROM TB_SYS_ORG_BAS O
                                       INNER JOIN TB_SYS_GRP_ORG_REL R ON  O.ORG_ID = R.ORG_ID
                                    UNION ALL
                                    SELECT LEVEL + 1 AS LEVEL 
                                         , O.ORG_ID
                                         , OO.GRP_ID
                                       FROM OO 
                                       INNER JOIN TB_SYS_ORG_BAS O ON OO.ORG_ID= O.UP_ORG_ID 
                                 )
                                 SELECT ORG_ID,GRP_ID  FROM OO
                        ) A 
                       , TB_SYS_EMP_BAS B 
                   WHERE A.ORG_ID = B.ORG_ID ) A 
              , TB_SYS_GRP_BAS B 
          WHERE A.USER_ID = #{userId}
            AND A.GRP_ID = B.GRP_ID 
    </select>
</mapper>